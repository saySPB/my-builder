document.addEventListener('DOMContentLoaded', () => {
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');
    const buildBtn = document.getElementById('buildBtn');
    const downloadLink = document.getElementById('downloadLink');

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (–∫–ª–∏–∫)
    uploadArea.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', handleFileUpload);

    // Drag & Drop (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.style.background = '#f0f8ff';
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.style.background = 'white';
        if (e.dataTransfer.files.length) {
            fileInput.files = e.dataTransfer.files;
            handleFileUpload();
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    function handleFileUpload() {
        if (!fileInput.files.length) return;
        
        const files = Array.from(fileInput.files);
        let filesHTML = files.map(file => 
            `<div class="file-item">üìÑ ${file.name} (${formatBytes(file.size)})</div>`
        ).join('');

        uploadArea.innerHTML = `
            <div class="files-list">${filesHTML}</div>
            <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ—â—ë —Ñ–∞–π–ª—ã –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</p>
        `;
        buildBtn.disabled = false;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2.5 MB")
    function formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }

    // –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∫–∏ (—Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã)
    buildBtn.addEventListener('click', () => {
        if (!fileInput.files.length) {
            alert('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª!');
            return;
        }

        const files = fileInput.files;
        console.log('–§–∞–π–ª—ã –¥–ª—è —Å–±–æ—Ä–∫–∏:', files); // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä

        buildBtn.textContent = '–°–±–æ—Ä–∫–∞...';
        buildBtn.disabled = true;

        // –ó–∞–≥–ª—É—à–∫–∞: –∏–º–∏—Ç–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏
        setTimeout(() => {
            buildBtn.textContent = '–°–æ–±—Ä–∞—Ç—å APK';
            buildBtn.disabled = false;
            downloadLink.href = '#';
            downloadLink.textContent = '–°–∫–∞—á–∞—Ç—å app.zip (—Ç–µ—Å—Ç)';
            downloadLink.classList.remove('hidden');
        }, 2000);
    });
});